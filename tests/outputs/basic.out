// Auto generated Click Template using GraphGen/clickGen.py at Mon Jan 22 21:34:14 2018 UTC
// Command line: {'arp': False, 'cryptoHardware': 'MicroCloud', 'ns_file': 'basic.ns', 'clientHardware': 'MicroCloud', 'writeRoutes': False, 'useDPDK': True, 'useCrypto': True, 'ct_os': 'Ubuntu1404-64-STD', 'draw_output': None, 'ctHardware': 'MicroCloud', 'useCodel': True, 'useContainers': True, 'loss': 0.0, 'os': 'Ubuntu1404-64-STD', 'clickHardware': 'dl380g3', 'delay': '0ms', 'writePaths': '', 'numServers': 1, 'bw': '1Gbps', 'numClients': 8, 'routes': None, 'output': 'basic.out', 'inConstraints': False, 'startCmd': '', 'infile': 'basic.xnet'} 


// Routers
router1 :: RadixIPLookup(${if1_ip} 2,
                         ${if1_16} ${if1_gw} 0,
                         ${if2_16} 1,
                         10.100.150.2 1,
                         10.100.150.1 2);

router2 :: RadixIPLookup(${if2_ip} 2,
                         ${if1_16} 0,
                         ${if2_16} ${if2_gw} 1,
                         10.100.150.1 0,
                         10.100.150.2 2);


// Packet Classifiers
c1 :: Classifier(12/0800, 12/0806 20/0001, 12/0806 20/0002, -);
c2 :: Classifier(12/0800, 12/0806 20/0001, 12/0806 20/0002, -);
chost :: Classifier(12/0800, 12/0806 20/0001, 12/0806 20/0002, -);

// VLAN Multiplexing
vlanmux :: VlanSwitch(VLAN ${vlan1}, VLAN ${vlan2});

// Packet Arrival
$DPDKArrival
vlanmux[0] -> c1;
vlanmux[1] -> c2;
FromHost(fake0) -> chost;

// Packet Departure
$DPDKDeparture
out1 :: VLANEncap(${vlan1}) -> ${out_if1};
out2 :: VLANEncap(${vlan2}) -> ${out_if2};

// Handle ARP
arpt :: Tee(3);

c1[1] -> ar1 :: ARPResponder(${if1_ip} ${if1_eth}) -> out1;
arpq1 :: ARPQuerier(${if1_ip}, ${if1_eth}) -> out1;
c1[2] -> arpt;
arpt[0] -> [1]arpq1;

c2[1] -> ar2 :: ARPResponder(${if2_ip} ${if2_eth}) -> out2;
arpq2 :: ARPQuerier(${if2_ip}, ${if2_eth}) -> out2;
c2[2] -> arpt;
arpt[1] -> [1]arpq2;

chost[1] -> c1;
chost[2] -> arpt;

// Link Traffic Shaping
link_1_2_queue :: ThreadSafeQueue(1000);
link_1_2_bw :: LinkUnqueue(0ms, 1Gbps);
link_1_2_loss :: RandomSample(DROP 0.0);
link_2_1_queue :: ThreadSafeQueue(1000);
link_2_1_bw :: LinkUnqueue(0ms, 1Gbps);
link_2_1_loss :: RandomSample(DROP 0.0);

// Decrement TTL and send time exceeded replies
r1ttl_2 :: DecIPTTL;
r1ttl_2[1] -> ICMPError(10.100.150.1, timeexceeded) -> router1;
r2ttl_1 :: DecIPTTL;
r2ttl_1[1] -> ICMPError(10.100.150.2, timeexceeded) -> router2;
r1ttl_out_e1 :: DecIPTTL;
r1ttl_out_e1[1] -> ICMPError(10.100.150.1, timeexceeded) -> router1;
r2ttl_out_e2 :: DecIPTTL;
r2ttl_out_e2[1] -> ICMPError(10.100.150.2, timeexceeded) -> router2;

// Links
router1[1] -> r1ttl_2 -> SetTimestamp(FIRST true) -> link_1_2_queue -> CoDel() -> link_1_2_loss -> link_1_2_bw -> router2
router2[0] -> r2ttl_1 -> SetTimestamp(FIRST true) -> link_2_1_queue -> CoDel() -> link_2_1_loss -> link_2_1_bw -> router1

 // Teed Inputs and Outputs

 // Input from Teed interfaces is discarded

// Output Chains

// Send IP Packets to Routers
c1[0] -> Strip(14) -> CheckIPHeader(0) -> router1;
c2[0] -> Strip(14) -> CheckIPHeader(0) -> router2;
chost[0] -> Strip(14) -> CheckIPHeader(0) -> router1;

// Send out packets to Interfaces
router1[0] -> r1ttl_out_e1 -> arpq1;
router2[1] -> r2ttl_out_e2 -> arpq2;

// Local Delivery
toh :: ToHost(fake0);

router1[2] -> EtherEncap(0x0800, 1:1:1:1:1:1, 2:2:2:2:2:2) -> toh;
router2[2] -> EtherEncap(0x0800, 1:1:1:1:1:1, 2:2:2:2:2:2) -> toh;
arpt[2] -> toh;

// Unknown packets to their death
c1[3] -> Print("${if1} Non IP") -> Discard;
c2[3] -> Print("${if2} Non IP") -> Discard;
chost[3] -> Print("Host Non IP") -> Discard;
