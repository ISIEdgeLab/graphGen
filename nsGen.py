import networkx as nx
import time

def writeNS(g, filename, args):
    fh = open(filename, "w")

    numServers = int(args.numServers)
    numClients = int(args.numClients)
    numEnclaves = len(nx.get_node_attributes(g, 'ifs'))
    writePreamble(fh, filename, args.startCmd)
    lans = writeEnclaveNodes(numEnclaves, "Ubuntu1404-64-STD", numServers, numClients, fh)
    writeLansLinks(lans, fh)
    writeIPs(numEnclaves, fh, numServers, numClients)
    if args.useContainers:
        writeContainers(numEnclaves, fh, numServers, numClients)
    writeStartCmds(numEnclaves, fh, numServers, numClients)
    writeEpilogue(fh)
    fh.close()

def writePreamble(fh, filename, start_cmd):
    tstr = time.asctime(time.gmtime(time.time()))
    fh.write("# Autogenerated by nsGen.py - %s UTC\n" % tstr)
    fh.write("set ns [new Simulator]\n")
    fh.write("source tb_compat.tcl\n")
    fh.write("\nset magi_str \"sudo python /proj/edgect/magi/current/magi_bootstrap.py -fp /proj/edgect/magi/current/\"\n")
    fh.write("\nset click_str \"/proj/edgect/exp_scripts/startClickAny.sh %s\"\n" % filename.split('.')[0])
    if start_cmd == "":
        fh.write("\nset my_start \"touch /tmp/my_start\"\n")
    else:
        fh.write("\nset my_start \"%s\"\n" % start_cmd)

def writeEnclaveNodes(numEnclaves, os, numServers, numClients, fh):
    lan_strs = []
    fh.write("\n# Enclaves\n")
    for n in range(numEnclaves):
        enc = n + 1
        fh.write("\n# Enclave %d\n" % enc)
        lstr = ""
        if numServers == 1:
            lstr = "server%d ct%d" % (enc, enc)
            fh.write("set server%d [$ns node]\n" % enc)
        else:
            for x in range(numServers):
                if x == 0:
                    lstr = "server%d%d ct%d" % (enc, x + 1, enc)
                else:
                    lstr = "%s server%d%d ct%d" % (lstr, enc, x + 1, enc)
                fh.write("set server%d%d [$ns node]\n" % (enc, x + 1))

        for x in range(numClients):
            fh.write("set traf%d%d [$ns node]\n" % (enc, x + 1))
            lstr = "%s traf%d%d" % (lstr, enc, x + 1)
        fh.write("set ct%d [$ns node]\n" % enc)
        fh.write("tb-set-node-os $ct%d %s\n" % (enc, os))
        fh.write("set crypto%d [$ns node]\n" % enc)
        fh.write("tb-set-node-os $crypto%d %s\n" % (enc, os))
        lan_strs.append(lstr)

    fh.write("\nset vrouter [$ns node]\n")
    fh.write("tb-set-node-os $vrouter Ubuntu1204-64-CT-CL2\n")
    fh.write("set control [$ns node]\n")
    fh.write("tb-set-node-os $control %s\n" % os)
    return lan_strs

def writeLansLinks(lans, fh):
    c = 1
    fh.write("\n# Lans\n")
    link_str = ""
    elink_str = ""
    for lan in lans:
        fh.write("set lan%d [$ns make-lan \"%s\" 1000Mb 0ms]\n" % (c, lan))
        link_str = "%sset link%d [$ns duplex-link $ct%d $crypto%d 1000Mb 0.0ms DropTail]\n" % (link_str, c, c, c)
        elink_str = "%sset elink%d [$ns duplex-link $crypto%d $vrouter 1000Mb 0.0ms DropTail]\n" % (elink_str, c, c)
        c = c + 1

    fh.write("\n#Internal Links\n")
    fh.write(link_str)
    fh.write("\n# Egress Links\n")
    fh.write(elink_str)

def writeIPs(numEnclaves, fh, numServers,  numClients):
    fh.write("\n# IPS\n")
    for n in range(numEnclaves):
        enc = n + 1
        addr = 1
        fh.write("\n# IPs for Enclave %d\n" % enc)
        for x in range(numClients):
            fh.write("tb-set-ip-lan $traf%d%d $lan%d 10.%d.1.%d\n"
                     % (enc, x + 1, enc, enc, addr))
            addr = addr + 1
        if numServers == 1:
            fh.write("tb-set-ip-lan $server%d $lan%d 10.%d.1.%d\n"
                     % (enc, enc, enc, addr))
        else:
            for x in range(numServers):
                fh.write("tb-set-ip-lan $server%d%d $lan%d 10.%d.1.%d\n"
                         % (enc, (x + 1), enc, enc, addr))
                addr = addr + 1


        fh.write("tb-set-ip-lan $ct%d $lan%d 10.%d.1.100\n"
                 % (enc, enc, enc))
        fh.write("tb-set-ip-link $ct%d $link%d 10.%d.2.1\n"
                 % (enc, enc, enc))
        fh.write("tb-set-ip-link $crypto%d $link%d 10.%d.2.2\n"
                 % (enc, enc, enc))

    fh.write("\n# Egress link IPS\n")
    for n in range(numEnclaves):
        enc = n + 1
        fh.write("tb-set-ip-link $crypto%d $elink%d 10.%d.10.1\n"
                 % (enc, enc, enc))
        fh.write("tb-set-ip-link $vrouter $elink%d 10.%d.10.2\n"
                 % (enc, enc))

def writeContainers(numEnclaves, fh, numServers, numClients):
    fh.write("\n# Container Partitioning\n")
    count = 0
    for n in range(numEnclaves):
        enc = n + 1
        for x in range(numClients):
            fh.write("tb-add-node-attribute $traf%d%d containers:partition %d\n"
                     % (enc, x + 1, n))
        if numServers == 1:
            fh.write("tb-add-node-attribute $server%d containers:partition %d\n"
                 % (enc, n))
        else:
            for x in range(numServers):
                fh.write("tb-add-node-attribute $server%d%d containers:partition %d\n"
                         % (enc, x + 1, n))
        count = n
    count = count + 1
    
    fh.write("\n")
    for n in range(numEnclaves):
        enc = n + 1
        fh.write("tb-add-node-attribute $ct%d containers:partition %d\n"
                 % (enc, count))
        count = count + 1
        fh.write("tb-add-node-attribute $crypto%d containers:partition %d\n"
                 % (enc, count))
        count = count + 1

    fh.write("\n")
    fh.write("tb-add-node-attribute $vrouter containers:partition %d\n"
             % (count))
    count = count + 1
    fh.write("tb-add-node-attribute $control containers:partition %d\n"
             % (count))

    fh.write("\n# Embed Physical Nodes\n")
    for n in range(numEnclaves):
        fh.write("tb-add-node-attribute $ct%d containers:node_type embedded_pnode\n" % (n + 1))
        fh.write("tb-add-node-attribute $crypto%d containers:node_type embedded_pnode\n" % (n + 1))
    fh.write("\ntb-add-node-attribute $vrouter containers:node_type embedded_pnode\n")
    fh.write("tb-add-node-attribute $control containers:node_type embedded_pnode\n")

def writeStartCmds(numEnclaves, fh, numServers, numClients):
    fh.write("\n# Start Commands\n")
    for n in range(numEnclaves):
        enc = n + 1
        fh.write("\n")
        for x in range(numClients):
            fh.write("tb-set-node-startcmd $traf%d%d \"$magi_str; $my_start\"\n" %
                     (enc, x + 1))
        if numServers == 1:
            fh.write("tb-set-node-startcmd $server%d \"$magi_str; $my_start\"\n"
                     % (enc))
        else:
            for x in range(numServers):
                fh.write("tb-set-node-startcmd $server%d%d \"$magi_str; $my_start\"\n"
                         % (enc, x + 1))
        fh.write("tb-set-node-startcmd $ct%d \"$magi_str; $my_start\"\n"
                 % (enc))
        fh.write("tb-set-node-startcmd $crypto%d \"$magi_str; $my_start\"\n"
                 % (enc))
                
    
    fh.write("\ntb-set-node-startcmd $vrouter \"$click_str; $magi_str; $my_start\"\n")
    fh.write("tb-set-node-startcmd $control \"sudo python /proj/edgect/exp_scripts/fixHosts.py; $magi_str; $my_start\"\n")

def writeEpilogue(fh):
    fh.write("\n# Epilogue\n")
    fh.write("$ns rtproto Static\n")
    fh.write("$ns run\n")
